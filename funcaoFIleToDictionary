.data
fileName:		.asciiz	"file.txt"
mensagemErroFile:	.asciiz	"Erro ao abrir o arquivo"
StringNumero:		.space	64   
StringValor:		.space	64               
bufferReadFile:		.asciiz " "
modeloLido:		.asciiz " "


.text
li	$v0,13
la	$a0,fileName
li	$a1,0	#flag 0 == ler, flag 1 == escrever 
li	$a2,0	#mode is ignored
syscall
addi	$sp,$sp,-4
sw	$v0,($sp)
jal	printMensagemErroFile
lw	$a0,($sp)	#contem o file descriptor
addi	$sp,$sp,4
li	$a1,0
jal	parsePosition
#escreve na tela o valor da string de numero e string de valor
li	$v0,4
la	$a0,StringNumero
syscall
la	$a0,StringValor
syscall
#fim do programa
li	$v0,10
syscall






parsePosition:	# void parsePosition ( $a0 fileDescriptor, $a1 int position)
		
	li	$t4,0
	move	$t5,$a1
	resetModelo:
	la	$s6,modeloLido
	loopLeitura:
	addi	$sp,$sp,-16
	sw	$a0,12($sp)
	sw	$t5,8($sp)
	sw	$t4,4($sp)
	sw	$s6,($sp)
	jal	funcaoReadFile
	#lw	$s6,($sp)
	lw	$t4,4($sp)
	lw	$t5,8($sp)
	lw	$a0,12($sp)
	addi	$sp,$sp,16
	la	$t0,bufferReadFile
	lb	$t1,($t0)
	sb	$t1,($s6)		#salva o byte lido na string ModeloLido
	addi	$s6,$s6,1
	beq	$t1,')',fimLeitura
	#beq	$t1,3,fimArquivo	
	j	loopLeitura
fimArquivo:
	li $v0,10
	syscall

fimLeitura:
beq	$t4,$t5,preparaParseLoad
addi	$t4,$t4,1
j	loopLeitura
# prepara para chamar a funcao que tira os parenteses e a virgula
preparaParseLoad:
la	$t0,modeloLido
la	$t1,StringNumero
la	$t2,StringValor
addi	$sp,$sp,-16
sw	$ra,12($sp)
sw	$t0,8($sp)	#endereco do vetor de entrada
sw	$t1,4($sp)	#endereco para vetorNumero
sw	$t2,($sp)	#endereco para vetorString	
jal	parseLoad
lw	$ra,($sp)
addi	$sp,$sp,4
jr	$ra


funcaoReadFile:	#recebe file descriptor em $a0
li	$v0,14
la	$a1,bufferReadFile
li	$a2,1	#numero maximo de caracteres a serem lidos
syscall
move	$a0,$v0
beq	$a0,0,fimArquivo
addi	$sp,$sp,-4
sw	$ra,($sp)
jal	printMensagemErroFile
#Se nao houver erro, o codigo continua
#a funcao retorna o endereco pra string lida do arquivo, no caso sera de apenas um caracter
lw	$ra,($sp)
addi	$sp,$sp,4
voltaFuncaoCaller:
la	$v0,bufferReadFile
jr	$ra


printMensagemErroFile:	#recebe em $a0 o valor de $v0
slt	$t1,$a0,$zero	#testa condicao de erro, se $v0 retornar negativo, deu erro no processo, chama funcao para notificar usuario
beq	$t1,1,printErro
jr 	$ra
printErro:
	la	$a0,mensagemErroFile
	li	$v0,4
	syscall
	li	$v0,10
	syscall

		
parseLoad: 	# tira a virgula e os parenteses do sting
	lw	$t2,($sp)	#endereco para vetorString	
	lw	$t1,4($sp)	#endereco para vetorNumero
	lw	$t0,8($sp)	#endereco do vetor de entrada
	addi	$sp,$sp,12
parse:	 
	lb $t3, 0($t0)
	addi $t0, $t0, 1
	beqz $t3, endDescaca
	beq $t3, '(',Pulo
	beq $t3, ',',puloMudaVetor
	beq $t3, ')',Pulo
	sb $t3, 0($t1)
	addi $t1, $t1, 1
	Pulo: j parse
	
puloMudaVetor:
	li	$t3,'\0'
	sb	$t3,0($t1)
	move	$t1,$t2		#quando encontrar a virgula, muda para o vetor de string
	j	parse
endDescaca:
	li	$t3,'\0'
	sb	$t3,0($t1)
	jr	$ra

limpaString:
	

